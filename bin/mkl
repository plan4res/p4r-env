#!/usr/bin/env python3

'''
This python script interacts with the MKL server.
Operations are:
1) Download of files
2) Upload of files
3) Remove files from the server

It requires Python3 and the python modules:

pip3 install requests requests-toolbelt

Use

./mkl -h

to get some help.
'''

import argparse
import requests
import base64
import sys
import time
import os
import http
# https://toolbelt.readthedocs.io/en/latest/uploading-data.html
from requests_toolbelt import MultipartEncoder, MultipartEncoderMonitor

# Default values
url='https://marketlab.pam-retd.fr/plan4res/'
workspace='Shared'
configFile="config/marketlab.conf"

##################

def b64login(login, password):
    return base64.b64encode(bytes(login+":"+password, 'utf-8')).decode('ascii')

##################

def downloadurl(url, sourcefile, login, password):
    return url+"get?data="+sourcefile+"&securityToken="+b64login(login, password)

##################

def checkWorkspace(url, sourcefile, login, password):
    try:
        # Check if workspace exists and fet Size of the file
        req = requests.head(downloadurl(url, sourcefile, login, password))
        req.raise_for_status()
        return req

    except requests.exceptions.RequestException as err:
        print("Error accessing MKL:", err.response.status_code, file=sys.stderr)
        if err.response.status_code == 403:
            print("Workspace does not exist and/or access not permitted with your credentials!", file=sys.stderr)
        sys.exit(1)

##################

def progress_bar(writesofar, totalSize):
    done = int(50 * writesofar / totalSize)
    sys.stdout.write("\r[%s%s]" % ('=' * done, ' ' * (50-done)) )
    sys.stdout.flush()

##################

def download(url, workspace, destdir, filename, login, password):
    try:
        destfile=destdir
        if len(destfile)>0:
            destfile+='/'
        destfile+=filename

        sourcefile=workspace
        if len(sourcefile)>0:
            sourcefile+='/'
        sourcefile+=filename

        totalSize = checkWorkspace(url, sourcefile, login, password).headers.get('Content-Length')
        if totalSize is None:
            print("Warning: file `{0}` doesn't exist on MKL (workspace `{1}`) or has zero size.".format(filename, workspace))
            return

        print("Downloading %s from %s" % (destfile, url+sourcefile))

        with open(destfile, 'wb') as f:
            # Open stream for download
            req = requests.get(downloadurl(url, sourcefile, login, password), stream=True)
            req.raise_for_status()

            start = time.time()

            writensofar = 0
            totalSize = int(totalSize)
            for data in req.iter_content(chunk_size=4096):
                writensofar += len(data)
                f.write(data)
                progress_bar(writensofar, totalSize)

            print(" Downloaded %i bytes /// " % totalSize, end = '')

            end = time.time()
            elapsedTime=end-start

            print("Time: %.3f seconds /// Bandwidth: %.3f MB/s" % (elapsedTime, totalSize/elapsedTime/(2**20)))

    except requests.exceptions.RequestException as err:
        print("Error accessing MKL:", err.response.status_code, file=sys.stderr)
        if err.response.status_code == http.client.NOT_FOUND:
            print("File {0} not found (workspace {1})".format(filename, workspace), file=sys.stderr)
        sys.exit(1)

    except IOError as err:
        print("I/O error({0}): {1}".format(err.errno, err.strerror), file=sys.stderr)
        print("Check the url and/or workspace name!", file=sys.stderr)
        sys.exit(1)

##################

def uploadurl(url, workspace, login, password):
    return url+"uploadFiles?currentWorkspace="+workspace+"&securityToken="+b64login(login, password)

##################

def create_callback(encoder):
    totalSize = encoder.len

    def callback(monitor):
        progress_bar(monitor.bytes_read, totalSize)

    return callback

##################

def upload(url, workspace, sourcefile, login, password):
    try:
        filename=os.path.basename(sourcefile)

        destfile=workspace
        if len(destfile)>0:
            destfile+='/'
        destfile+=filename
        checkWorkspace(url, destfile, login, password)

        print("Uploading %s to %s" % (sourcefile, url+workspace))

        start = time.time()

        with open(sourcefile, 'rb') as f:
            # Open stream for upload
            encoder = MultipartEncoder(fields={filename : (filename , f)})
            callback = create_callback(encoder)
            monitor = MultipartEncoderMonitor(encoder, callback)
            req = requests.post(uploadurl(url, workspace, login, password), data=monitor,
                                headers={'Content-Type': monitor.content_type})


        end = time.time()
        elapsedTime=end-start

        totalSize = os.path.getsize(sourcefile)

        print(" Uploaded %d bytes" % totalSize, end='')
        print(" /// Time: %.3f seconds /// Bandwidth: %.3f MB/s" % (elapsedTime, totalSize/elapsedTime/(2**20)))

    except requests.exceptions.RequestException as err:
        print("Error accessing MKL:", err.response.status_code, file=sys.stderr)
        sys.exit(1)

    except IOError as err:
        print("I/O error({0}): {1}".format(err.errno, err.strerror), file=sys.stderr)
        sys.exit(1)

##################

def removeurl(url, destfile, login, password):
    return url+"remove?data="+destfile+"&securityToken="+b64login(login, password)

##################

def remove(url, workspace, filename, login, password):
    try:
        destfile=workspace
        if len(destfile)>0:
            destfile+='/'
        destfile+=filename
        checkWorkspace(url, destfile, login, password)

        print("Removing %s" % (url+destfile))

        start = time.time()

        req = requests.head(removeurl(url, destfile, login, password))
        req.raise_for_status()

        end = time.time()
        elapsedTime=end-start

        print("Time: %.3f seconds" % elapsedTime)

    except requests.exceptions.RequestException as err:
        print("Error accessing MKL:", err.response.status_code, file=sys.stderr)
        if err.response.status_code == http.client.NOT_FOUND or err.response.status_code == 403:
            print("File {0} not found (workspace {1})".format(filename, workspace), file=sys.stderr)
        sys.exit(1)

##################

def listOfWorkspaces(url, login, password):
    try:
        url=url+"api/v1/workspaces"
        req = requests.get(url, auth=(login, password))
        req.raise_for_status()
        print("List of workspaces on MKL:")
        for w in req.text.split(';'):
            print(w)

    except requests.exceptions.RequestException as err:
        print("Error accessing MKL:", err.response.status_code, file=sys.stderr)
        if err.response.status_code == 401:
            print("You cannot access this resource!", file=sys.stderr)
        elif err.response.status_code == 403:
            print("Workspace does not exist and/or access not permitted with your credentials!", file=sys.stderr)
        sys.exit(1)

##################

def listOfFilesInWorkspace(url, workspace, login, password):
    try:
        url=url+"api/v1/workspaces"
        if len(workspace)>0:
            url+='/'
        url+=workspace
        req = requests.get(url, auth=(login, password))
        req.raise_for_status()
        print("List of files in workspace `{0}` on MKL:".format(workspace))
        for w in req.text.split(';'):
            print(w)

    except requests.exceptions.RequestException as err:
        print("Error accessing MKL:", err.response.status_code, file=sys.stderr)
        if err.response.status_code == 401:
            print("You cannot access this resource!", file=sys.stderr)
        elif err.response.status_code == 403:
            print("Workspace does not exist and/or access not permitted with your credentials!", file=sys.stderr)
        sys.exit(1)

##################

def query_yes_no(question, default="n"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"y": True, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "y":
        prompt = " [Y/n] "
    elif default == "n":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'y' or 'n'.\n")

##################

def setLoginPassword(setLogin, setPassword, login, password):
    # Open config file if needed
    loginConfig=None
    passwordConfig=None
    if not (setLogin and setPassword):
        filename=os.path.dirname(os.path.realpath(__file__))+"/../"+configFile
        try:
            with open(filename, 'r') as config:
                for line in config:
                    line=line.strip()
                    if line.startswith("user:"):
                        if not setLogin:
                            loginConfig=line.split(':')[1].strip()
                    elif line.startswith("password:"):
                        if not setPassword:
                            passwordConfig=line.split(':')[1].strip()
                    else:
                        print("Warning: Unrecongnized text in the config file at {0}: `{1}".format(filename, line))

            if loginConfig:
                login=loginConfig
                print("Login taken from marketlab config file.")

            if passwordConfig:
                password=passwordConfig
                print("Password taken from marketlab config file.")

        except IOError as err:
            print("I/O error({0}) while opening the config file at {1}: {2}".format(err.errno, filename, err.strerror))
            sys.exit(1)

    if not setLogin and loginConfig is None:
        print("Please provide a login either with `-l` flag or within the markelab.conf file!", file=sys.stderr)
        sys.exit(1)

    if not setPassword and passwordConfig is None:
        print("Please provide a password either with `-p` flag or within the markelab.conf file!", file=sys.stderr)
        sys.exit(1)

    return login, password


##################

# Print examples, unformatted
class MyArgumentParser (argparse.ArgumentParser):
    def print_help(self, file=None):
        super().print_help(file)
        print('''
  Examples

     1) Download of a remote file (in this example is 2017_8_ActualGenerationOutputPerUnit.csv,
        multiple files can be specified)

        ./mkl 2017_8_ActualGenerationOutputPerUnit.csv -d

        By default the file is downloaded in the current directory of execution,
        otherwise you can specifiy a different location in `-d <dir>`.

     2) Upload a local file (in this example is 2017_8_ActualGenerationOutputPerUnit.csv,
        multiple files can be specified)

        ./mkl 2017_8_ActualGenerationOutputPerUnit.csv -u

     3) Remove a file (in this example is 2017_8_ActualGenerationOutputPerUnit.csv,
        multiple files can be specified)

        ./mkl 2017_8_ActualGenerationOutputPerUnit.csv -r

    4) List of workspaces

        ./mkl -a

    5) List of files in workspace `Shared`

        ./mkl -f -w Shared
        ''')

##################

if __name__ == '__main__':
    parser = MyArgumentParser(description=
                                     """
                                     Handling plan4res files on MKL.
                                     Operations priority order follows the order of appearance in the list bellow,
                                     e.g. if -u and -r options are supplied, only the latter gets executed.
                                     An operation must be specified.
                                     """,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-w',metavar='<workspace>', dest='workspace',
                        default=workspace,
                        help='Workspace on MKL server')
    parser.add_argument('-l',metavar='<login>', dest='login',
                        default="taken from "+configFile,
                        help='User login on MKL server')
    parser.add_argument('-p',metavar='<password>', dest='password',
                        default="taken from "+configFile,
                        help='User password on MKL server')
    parser.add_argument('-r', dest='remove',
                        action='store_true',
                        default='disabled',
                        help='(operation) Enable remove files on the MKL server. ')
    parser.add_argument('-u', dest='upload',
                        action='store_true',
                        default='disabled',
                        help='(operation) Enable upload files to the MKL server. ')
    parser.add_argument('-d',metavar='current directory or <dir>', dest='download',
                        nargs='?', const='./',
                        default='disabled',
                        help='(operation) Enable download from the MKL server to a destination directory on the local host ' \
                        '(the current directory or <dir>, if specified).')
    parser.add_argument('-a', dest='list_workspaces',
                        action='store_true',
                        default='disabled',
                        help='(operation) Get list of workspaces on the MKL server. ')
    parser.add_argument('-f', dest='list_files',
                        action='store_true',
                        default='disabled',
                        help='(operation) Get list of files in a workspace on the MKL server. ')
    parser.add_argument('-y',dest='yes', action='store_true', help='Always force the operation execution')
    parser.add_argument('filenames', nargs='*', help='list of files')
    args=parser.parse_args()

    label=None
    useFiles=True
    # Follow help order
    if args.remove==True:
        label="Remove"
    elif args.upload==True:
        label="Upload"
    elif any([arg.startswith("-d") for arg in sys.argv[1:]]):
        label="Download"
    elif args.list_workspaces==True:
        label="Workspaces"
        useFiles=False
    elif args.list_files==True:
        label="Files"
        useFiles=False

    if not label or ((not args.filenames) and useFiles):
        print("\n Please provide operations and/or name of the files.\n", file=sys.stderr)
        parser.print_help(sys.stderr)
        sys.exit(1)

    # Set value for workspace
    workspace = args.workspace
    # Set values for login and password
    login, password = setLoginPassword(any([arg.startswith("-l") for arg in sys.argv[1:]]),
                                       any([arg.startswith("-p") for arg in sys.argv[1:]]),
                                       login = args.login,
                                       password = args.password)

    if useFiles:
        if (args.yes or query_yes_no(label+" files?")):
            for filename in args.filenames:
                if label[0]=='R':
                    remove(url, workspace, filename, login, password)
                elif label[0]=='U':
                    upload(url, workspace, filename, login, password)
                elif label[0]=='D':
                    download(url, workspace, args.download, filename, login, password)
    else:
        if label[0]=='W':
            listOfWorkspaces(url, login, password)
        elif label[0]=='F':
            listOfFilesInWorkspace(url, workspace, login, password)
